// <auto-generated />
using System;
using BagelzClassLibrary.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BagelzClassLibrary.Migrations
{
    [DbContext(typeof(BagelzContext))]
    [Migration("20231026200702_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BagelzClassLibrary.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BagelzClassLibrary.Entities.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuItemId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("MenuItemId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            MenuItemId = 1,
                            Name = "White Bagel",
                            Price = 2f
                        },
                        new
                        {
                            MenuItemId = 2,
                            Name = "Everything Bagel",
                            Price = 3f
                        },
                        new
                        {
                            MenuItemId = 3,
                            Name = "Whole Wheat Bagel",
                            Price = 3f
                        },
                        new
                        {
                            MenuItemId = 4,
                            Name = "Cream Cheese",
                            Price = 1f
                        },
                        new
                        {
                            MenuItemId = 5,
                            Name = "BB Cream Cheese",
                            Price = 2f
                        },
                        new
                        {
                            MenuItemId = 6,
                            Name = "Cheese",
                            Price = 1f
                        },
                        new
                        {
                            MenuItemId = 7,
                            Name = "Jalapeno Peppers",
                            Price = 1f
                        },
                        new
                        {
                            MenuItemId = 8,
                            Name = "Pepper",
                            Price = 1f
                        },
                        new
                        {
                            MenuItemId = 9,
                            Name = "Honey",
                            Price = 1f
                        },
                        new
                        {
                            MenuItemId = 10,
                            Name = "Bacon",
                            Price = 2f
                        },
                        new
                        {
                            MenuItemId = 11,
                            Name = "Egg",
                            Price = 2f
                        },
                        new
                        {
                            MenuItemId = 12,
                            Name = "Tomato",
                            Price = 1f
                        },
                        new
                        {
                            MenuItemId = 13,
                            Name = "Avacado",
                            Price = 2f
                        },
                        new
                        {
                            MenuItemId = 14,
                            Name = "Coffee",
                            Price = 2f
                        },
                        new
                        {
                            MenuItemId = 15,
                            Name = "Pop",
                            Price = 3f
                        },
                        new
                        {
                            MenuItemId = 16,
                            Name = "Tea",
                            Price = 2f
                        },
                        new
                        {
                            MenuItemId = 17,
                            Name = "Water",
                            Price = 0f
                        });
                });

            modelBuilder.Entity("BagelzClassLibrary.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BagelzClassLibrary.Entities.OrderLineItem", b =>
                {
                    b.Property<int>("OrderLineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderLineItemId"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("OrderLineItemId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderLineItems");
                });

            modelBuilder.Entity("BagelzClassLibrary.Entities.Order", b =>
                {
                    b.HasOne("BagelzClassLibrary.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BagelzClassLibrary.Entities.OrderLineItem", b =>
                {
                    b.HasOne("BagelzClassLibrary.Entities.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId");

                    b.HasOne("BagelzClassLibrary.Entities.Order", null)
                        .WithMany("OrderLineItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("BagelzClassLibrary.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BagelzClassLibrary.Entities.Order", b =>
                {
                    b.Navigation("OrderLineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
