@using BagelzClassLibrary.Entities;
@inject HttpClient Http;
@inject NavigationManager NavManager;

<div class="card receipt-card" style="
            --bg-color: @BackgroundColor;
            --text-color: @TextColor;
            border: 1px solid @BorderColor;
            border-radius: 4px;
    ">
    <div class="card-body">
        <div class="card-title">
            <h5>Receipt</h5>
        </div>
 
        <div class="card-text">
            <div class="table-responsive">
                <table class="table table-hover">
                    <tr>
                        <th colspan="8" scope="col">Item</th>
                        <th scope="col">Quantity</th>
                        <th scope="col">Price</th>
                    </tr>

                    @foreach (var orderItem in Order.OrderItems ?? new())
                    {
                        <tr>
                            <td colspan="8">@orderItem?.MenuItem?.Name</td>
                            <td>@orderItem?.Quantity</td>
                            <td>@orderItem?.MenuItem?.FormattedPrice</td>
                        </tr>
                    }

                </table>
            </div>
            <div class="Tax">
                <p>Tax: @((Order.TotalPrice * TaxRate).ToString("C"))</p>
            </div>
            <div class="total">
                <p>Total: @(((Order.TotalPrice) + (Order.TotalPrice * TaxRate)).ToString("C"))</p>
            </div>

            <div class="buttons">
                <button class="btn btn-primary" @onclick="PlaceOrder">Place Order</button>
                <button class="btn btn-secondary" @onclick="CancelOrder">Cancel Order</button>
            </div>
            
        </div>
    </div>
</div>

@code {
    [Parameter]
    [EditorRequired]
    public OrderViewModel Order { get; set; } = new OrderViewModel();

    [Parameter]
    public string BackgroundColor { get; set; } = "white";

    [Parameter]
    public string TextColor { get; set; } = "black";

    [Parameter]
    public string BorderColor { get; set; } = "#989898";

    [Parameter]
    public decimal TaxRate { get; set; } = 0.08m;


    private void CancelOrder()
    {
        // Redirect to beginning
        NavManager.NavigateTo("/");
    }

    private async void PlaceOrder()
    {

        var order = new Order
            {
                OrderDate = Order.OrderDate,
                CustomerId = Order.CustomerId,
            };

        foreach (var orderItem in Order.OrderItems ?? new())
        {
            order.OrderItems.Add(new OrderItem
                {
                    MenuItemId = orderItem.MenuItemId,
                    Price = orderItem?.MenuItem?.Price ?? 0,
                    Quantity = orderItem?.Quantity ?? 0,
                });
        }

        var response = await Http.PostAsJsonAsync<Order>("api/orders", order);
        
        // Redirect to list
        NavManager.NavigateTo("/orders");
    }
}